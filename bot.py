import telebot
import json
import os
import io

import re
from html import escape

from datetime import datetime
from dateutil.relativedelta import relativedelta
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import timedelta
from firebase_init import init_firebase
db = init_firebase()                  # db —Ç–µ–ø–µ—Ä—å ‚Äî —ç—Ç–æ firebase_admin.db

from service_aliases import canon 
         # –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
from tariff_providers import (
    fetch_yandex_plus, fetch_vk_combo,
    fetch_okko, fetch_ivi, fetch_megogo,
    fetch_start, fetch_wink, fetch_moretv,
    fetch_premier, fetch_kinopoisk,       
)

BAD = re.compile(r'[.#$/\[\]]')          # –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã

MONTHS_RU = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è",
    5: "–º–∞—è", 6: "–∏—é–Ω—è", 7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞",
    9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}


def safe_key(name: str) -> str:
    """safe_key('more.tv') ‚Üí 'more_tv'  (Firebase-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–ª—é—á)"""
    key = BAD.sub('_', name.lower())
    key = re.sub(r'__+', '_', key).strip('_')   # –¥–≤–æ–π–Ω—ã–µ ¬´__¬ª –∏ –∫—Ä–∞–π–Ω–∏–µ ¬´_¬ª
    return key or "unnamed"                     # –ø—É—Å—Ç–æ–π ‚Üí 'unnamed'





TOKEN = os.environ["TOKEN"]
bot = telebot.TeleBot(TOKEN)




# FIREBASE –≤–µ—Ç–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å
FIREBASE_ROOT = db.reference("/subscriptions")
TARIFF_REF = db.reference("/tariffs")
user_states = {}  # —Ö—Ä–∞–Ω–∏—Ç, –∫—Ç–æ —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É


def escape_markdown_v2(text):
    escape_chars = r"_*[]()~`>#+-=|{}.!"
    for ch in escape_chars:
        text = text.replace(ch, f"\\{ch}")
    return text



def load_subscriptions() -> dict:
    data = FIREBASE_ROOT.get()
    return data or {}

def save_subscriptions(data: dict) -> None:
    FIREBASE_ROOT.set(data)





def update_tariff_db() -> None:
   
    tariffs_raw = {
        "Yandex Plus": fetch_yandex_plus(),
        "VK Combo":    fetch_vk_combo(),
        "Okko":        fetch_okko(),
        "Ivi":         fetch_ivi(),
        "Megogo":      fetch_megogo(),
        "START":       fetch_start(),
        "Wink":        fetch_wink(),
        "more.tv":     fetch_moretv(),
        "Premier":     fetch_premier(),
        "Kinopoisk":   fetch_kinopoisk(),

    }


    tariffs = {
        safe_key(name): offers               
        for name, offers in tariffs_raw.items()
        if offers                         
    }

    # ---------- –∑–∞–ø–∏—Å—å –≤ Firebase ----------
    TARIFF_REF.set(tariffs)
    print("üÜô Tariffs refreshed:", list(tariffs.keys()))




# ===== –ö–æ–º–∞–Ω–¥—ã =====

def auto_update_subscriptions(subs):
    today = datetime.today()
    updated = False

    for sub in subs:
        try:
            pay_date = datetime.strptime(sub["next_payment"], "%d.%m.%Y")
            while pay_date < today:
                period = sub.get("period", "monthly")
                if period == "monthly":
                    pay_date += relativedelta(months=1)
                elif period == "yearly":
                    pay_date += relativedelta(years=1)
                else:
                    break
                updated = True
            sub["next_payment"] = pay_date.strftime("%d.%m.%Y")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            if "history" not in sub:
                sub["history"] = []

            sub["history"].append({
                "date": pay_date.strftime("%d.%m.%Y"),
                "price": sub.get("price", 0)
            })

        except:
            continue

    return updated






















@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ (WatchDogSub) –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –Ω–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã. –ù–∞–ø–∏—à–∏ /menu –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å.")

@bot.message_handler(commands=['menu'])
def show_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã –ü–æ–¥–ø–∏—Å–∫–∏", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    markup.row("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –°–ª—É–∂–µ–±–Ω–æ–µ")
    markup.row("üìë –¢–∞—Ä–∏—Ñ—ã —Å–µ—Ä–≤–∏—Å–æ–≤")


    bot.send_message(message.chat.id, "üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)



@bot.message_handler(func=lambda msg: msg.text == "üìã –ü–æ–¥–ø–∏—Å–∫–∏")
def show_subscriptions_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å", "üì¶ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞")
    markup.row("üóë –£–¥–∞–ª–∏—Ç—å", "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å")


    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üìã –ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
def show_notify_menu(message):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        telebot.types.InlineKeyboardButton("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –æ–ø–ª–∞—Ç—ã", callback_data="notify_upcoming"),
        telebot.types.InlineKeyboardButton("‚è≥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–æ–∫", callback_data="change_notify_days"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="notify_disable"),
        telebot.types.InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="notify_enable"),
        telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back")
    )
    bot.send_message(message.chat.id, "üîî –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=markup)


@bot.message_handler(func=lambda msg: msg.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
def show_analytics_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìä –ê–Ω–∞–ª–∏–∑", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    markup.row("üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫", "üìÅ –ò–º–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫")
    markup.row("üßæ –ò—Å—Ç–æ—Ä–∏—è")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "üìä –ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "‚öôÔ∏è –°–ª—É–∂–µ–±–Ω–æ–µ")
def show_service_menu(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    markup.row("üîô –ù–∞–∑–∞–¥")
    bot.send_message(message.chat.id, "‚öôÔ∏è –°–ª—É–∂–µ–±–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥")
def handle_back(message):
    show_menu(message)











# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π =====

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = str(message.from_user.id)
    menu_commands = ["üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "üìä –ê–Ω–∞–ª–∏–∑", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "‚ûï –î–æ–±–∞–≤–∏—Ç—å", "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "üóë –£–¥–∞–ª–∏—Ç—å", "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫", "üßæ –ò—Å—Ç–æ—Ä–∏—è", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "üìë –¢–∞—Ä–∏—Ñ—ã —Å–µ—Ä–≤–∏—Å–æ–≤", "üìÅ –ò–º–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫"   ]

        # -------- –±–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è --------
    state = user_states.get(user_id)
    if state and state.startswith("editing_"):
        idx = int(state.split("_")[1])

        parts = message.text.split(',')
        if len(parts) != 2:
            bot.send_message(message.chat.id,
                            "‚ùå –ù—É–∂–Ω–æ 2 —ç–ª–µ–º–µ–Ω—Ç–∞: –¶–µ–Ω–∞, –î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).")
            return

        price_str, date_str = map(str.strip, parts)

        try:
            price = int(price_str)
            if price <= 0:
                raise ValueError
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        try:
            pay_date = datetime.strptime(date_str, "%d.%m.%Y")
            if pay_date < datetime.today():
                bot.send_message(message.chat.id, "‚ùå –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –£–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é.")
                return
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 01.05.2025")
            return

        # ---- —Å–æ—Ö—Ä–∞–Ω—è–µ–º ----
        data = load_subscriptions()
        subs = data.get(user_id, [])
        if 0 <= idx < len(subs):
            subs[idx]["price"]        = price
            subs[idx]["next_payment"] = pay_date.strftime("%d.%m.%Y")
            save_subscriptions(data)
            bot.send_message(message.chat.id, "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        user_states[user_id] = None
        return


    print("[DEBUG] message.text:", message.text)

    if message.text in menu_commands:
        user_states[user_id] = None  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—é–±–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    if user_states.get(user_id) == "waiting_for_subscription":
        if message.text == "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥":
            user_states[user_id] = None
            show_subscriptions_menu(message)
            bot.send_message(message.chat.id, "‚ùé –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
            return
        else:
            handle_subscription_input(message)
            return

    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
        user_states[user_id] = "waiting_for_subscription"
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥")
        bot.send_message(
            message.chat.id,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "`–ù–∞–∑–≤–∞–Ω–∏–µ, –¶–µ–Ω–∞, –î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã (–î–î.–ú–ú.–ì–ì–ì–ì)`\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä:\n"
            "```text\nVK Combo, 200, 25.12.2025\n```",
            parse_mode="Markdown",
            reply_markup=markup
        )
        return













    elif message.text == "üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏":
        data = load_subscriptions()
        subs = data.get(user_id, [])

        if auto_update_subscriptions(subs):
            save_subscriptions(data)

        if not subs:
            bot.send_message(message.chat.id, "üîç –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        lines = []
        for s in subs:
            canon_id = canon(s["service"])
            key      = safe_key(canon_id)
            offers   = (TARIFF_REF.get(key) or [])
            url      = offers[0].get("url") if offers else None

            status   = "üü¢" if s.get("active", True) else "üî¥"
            title    = escape(s["display"])
            if url:
                safe_url = (
                    url.replace("&", "&amp;")
                    .replace("<", "&lt;")
                    .replace(">", "&gt;")
                    .strip()
                )
                service = f'<a href="{safe_url}">{title}</a>'
            else:
                service = title
            price    = s.get("price", "‚Äî")
            from urllib.parse import quote


            

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
            raw_date = s.get("next_payment")
            if raw_date:
                try:
                    date_obj = datetime.strptime(raw_date, "%d.%m.%Y")
                    date_str = date_obj.strftime("%d.%m.%Y")
                except:
                    date_str = raw_date
            else:
                date_str = "‚Äî"

            lines.append(
                f"{status} {service}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}‚ÇΩ</b>\n"
                f"üìÖ –û–ø–ª–∞—Ç–∞ –¥–æ: <b>{date_str}</b>\n"
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            )

        text = "\n".join(lines)
        bot.send_message(
            message.chat.id,
            f"üìã <b>–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n{text}",
            parse_mode="HTML"
        )
        return


        



    elif message.text == "üìä –ê–Ω–∞–ª–∏–∑":

        user_id = str(message.from_user.id)
        data = load_subscriptions()
        subs = data.get(user_id, [])

        if not subs:
            bot.send_message(message.chat.id, "üìä –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        total = sum(sub["price"] for sub in subs)
        active_subs = [s for s in subs if s.get("active", True)]
        inactive_subs = [s for s in subs if not s.get("active", True)]
        notify_on = sum(1 for s in subs if s.get("notify", False))
        average = round(total / len(subs), 2) if subs else 0

        notify_days_values = [s.get("notify_days", 0) for s in subs if s.get("notify", False)]
        avg_notify_days = round(sum(notify_days_values) / len(notify_days_values), 1) if notify_days_values else 0

        no_notify = [s for s in subs if not s.get("notify", False)]

        # –ë–ª–∏–∂–∞–π—à–∏–µ 3 –ø–ª–∞—Ç–µ–∂–∞
        upcoming_list = sorted(
            [s for s in active_subs if s.get("next_payment")],
            key=lambda s: datetime.strptime(s["next_payment"], "%d.%m.%Y")
        )[:3]

        upcoming_text = ""
        for s in upcoming_list:
            try:
                pd = datetime.strptime(s["next_payment"], "%d.%m.%Y")
                pretty_date = f"{pd.day} {MONTHS_RU[pd.month]} {pd.year}"

                upcoming_text += f"‚Ä¢ üîπ {s['service']} ‚Äî {pretty_date} ({s['price']}‚ÇΩ)\n"
            except:
                continue

        most_expensive = max(subs, key=lambda s: s["price"])

        text = (
            "üìä *–ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫*\n\n"
            "*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ üì¶ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: **{len(subs)}**\n"
            f"‚Ä¢ ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: **{len(active_subs)}**\n"
            f"‚Ä¢ ‚ùå –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ: **{len(inactive_subs)}**\n"
            f"‚Ä¢ üîî –° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: **{notify_on}**\n\n"
            "*–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å–≤–æ–¥–∫–∞:*\n"
            f"‚Ä¢ üí∏ –°—É–º–º–∞ –≤ –º–µ—Å—è—Ü: **{total}‚ÇΩ**\n"
            f"‚Ä¢ üìà –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{average}‚ÇΩ**\n"
            f"‚Ä¢ üëë –°–∞–º–∞—è –¥–æ—Ä–æ–≥–∞—è: **{most_expensive['service']}** ‚Äî **{most_expensive['price']}‚ÇΩ**\n\n"
            "*–ë–ª–∏–∂–∞–π—à–∏–µ –æ–ø–ª–∞—Ç—ã:*\n"
            f"{upcoming_text}\n"
            "*–°—Ä–æ–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π:*\n"
            f"‚Ä¢ üîî –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: **{avg_notify_days} –¥–Ω—è**\n"
            f"‚Ä¢ üîï –ë–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: **{len(no_notify)}** –ø–æ–¥–ø–∏—Å–∫–∏(–æ–∫)\n\n"
            "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            "‚Ä¢ üîç –ü—Ä–æ–≤–µ—Ä—å –∞—Ä—Ö–∏–≤ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –∑–∞–±—ã—Ç—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏\n"
            "‚Ä¢ üí° –í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–∞–º, –≥–¥–µ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
        )

        bot.send_message(message.chat.id, text, parse_mode="Markdown")





    elif message.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        markup = telebot.types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            telebot.types.InlineKeyboardButton("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –æ–ø–ª–∞—Ç—ã", callback_data="notify_upcoming"),
            telebot.types.InlineKeyboardButton("‚è≥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–æ–∫", callback_data="change_notify_days"),
            telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="notify_disable"),
            telebot.types.InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="notify_enable")
        )
        bot.send_message(
            message.chat.id,
            "üîî –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
            reply_markup=markup
    )


    elif message.text == "üóë –£–¥–∞–ª–∏—Ç—å":
        data = load_subscriptions()
        subs = data.get(user_id, [])
        if not subs:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        markup = telebot.types.InlineKeyboardMarkup()
        for i, s in enumerate(subs):
            btn_text = f"{s['service']} ({s['next_payment']})"
            markup.add(telebot.types.InlineKeyboardButton(
                text=btn_text,
                callback_data=f"del_{i}"
            ))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

    elif message.text == "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å":
        data = load_subscriptions()
        subs = data.get(user_id, [])
        active_subs = [s for s in subs if s.get("active", True)]
        if not active_subs:
            bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            return

        markup = telebot.types.InlineKeyboardMarkup()
        for i, s in enumerate(active_subs):
            btn_text = f"{s['service']} ({s['next_payment']})"
            markup.add(telebot.types.InlineKeyboardButton(
                text=btn_text,
                callback_data=f"pause_{i}"
            ))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:", reply_markup=markup)

    elif message.text == "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å":
        data = load_subscriptions()
        subs = data.get(user_id, [])
        inactive_subs = [s for s in subs if not s.get("active", True)]

        if not inactive_subs:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        markup = telebot.types.InlineKeyboardMarkup()
        for i, s in enumerate(inactive_subs):
            btn_text = f"{s['service']} ({s['next_payment']})"
            markup.add(telebot.types.InlineKeyboardButton(
                text=btn_text,
                callback_data=f"resume_{i}"
            ))

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", reply_markup=markup)


    elif message.text == "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏":
        user_id = str(message.from_user.id)
        data = load_subscriptions()
        subs = data.get(user_id, [])

        if not subs:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        text = "üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–æ–∫:*\n\n"
        has_recommendations = False

        for s in subs:
            if not s.get("active", True):
                continue

            next_payment = s.get("next_payment")
            if not next_payment:
                continue

            try:
                pay_date = datetime.strptime(next_payment, "%d.%m.%Y")
                days_remaining = (pay_date - datetime.today()).days
                if days_remaining > 60:
                    text += f"üî∏ {s['service']} ‚Äî —Å–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å.\n"
                    has_recommendations = True
            except:
                continue

        if not has_recommendations:
            text = "‚úÖ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã –∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 60 –¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã."

        bot.send_message(message.chat.id, text, parse_mode="Markdown")


    elif message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":

        help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É WatchDogSub</b>\n\n"

        "<b>üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:</b>\n"
        "‚Ä¢  –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ, –¶–µ–Ω–∞, –î–∞—Ç–∞)\n"
        "‚Ä¢  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "‚Ä¢ –£–¥–∞–ª–∏—Ç—å, –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ª—é–±—É—é –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚Ä¢ –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø–æ –ø–µ—Ä–∏–æ–¥—É\n\n"

        "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å / –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: –∑–∞ 1, 3, 5 –∏–ª–∏ 7 –¥–Ω–µ–π –¥–æ –æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å  –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã –∏ —Å—É–º–º—ã\n"

        "<b>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫, –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞\n"
        "‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º–æ–π –¥–æ—Ä–æ–≥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢  –°–æ–≤–µ—Ç—ã –ø–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—é –º–∞–ª–æ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"

        "<b>üìÑ –≠–∫—Å–ø–æ—Ä—Ç –∏ –∏—Å—Ç–æ—Ä–∏—è:</b>\n"
        "‚Ä¢  –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª\n"
        "‚Ä¢  –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω –ø–æ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–µ\n"

        "<b>üìë –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏:</b>\n"
        "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –±–æ–ª–µ–µ –¥–µ—à—ë–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É\n"

        "<b>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        "‚Ä¢ –£–º–Ω–∞—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é\n\n"

        "üîπ <b>–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /menu ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"

        "‚ÑπÔ∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏. –ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç!"
    )
        bot.send_message(message.chat.id, help_text, parse_mode="HTML")


    elif message.text == "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è":


        data = load_subscriptions()
        today = datetime.today()
        notify_delta = timedelta(days=1)
        user_id = str(message.from_user.id)
        subs = data.get(user_id, [])

        if not subs:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        notified = False
        for sub in subs:
            if not sub.get("active", True) or not sub.get("notify", True):
                continue

            try:
                pay_date = datetime.strptime(sub["next_payment"], "%d.%m.%Y")
                if 0 <= (pay_date - today).days <= notify_delta.days:
                    bot.send_message(
                        message.chat.id,
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ {sub['service']} ‚Äî {pay_date.strftime('%d.%m.%Y')} –Ω–∞ —Å—É–º–º—É {sub['price']}‚ÇΩ"
                    )
                    notified = True
            except:
                continue

        if not notified:
            bot.send_message(message.chat.id, "‚úÖ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")


    elif message.text == "üìÑ –≠–∫—Å–ø–æ—Ä—Ç":

        user_id = str(message.from_user.id)
        data = load_subscriptions()
        subs = data.get(user_id, [])

        if not subs:
            bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        filename = f"subscriptions_{user_id}.txt"
        lines = []

        for s in subs:
            status = "–ê–∫—Ç–∏–≤–Ω–∞" if s.get("active", True) else "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
            service = s.get("service", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            price = s.get("price", 0)
            date = s.get("next_payment", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            lines.append(f"{service} ‚Äî {price}‚ÇΩ, –¥–∞—Ç–∞: {date}, —Å—Ç–∞—Ç—É—Å: {status}")

        with open(filename, "w", encoding="utf-8") as f:
            f.write("üìÑ –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n")
            f.write("\n".join(lines))

        with open(filename, "rb") as f:
            bot.send_document(message.chat.id, f, caption="üìÑ –í–æ—Ç –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫")



    elif message.text ==  "üßæ –ò—Å—Ç–æ—Ä–∏—è":

        user_id = str(message.from_user.id)
        data = load_subscriptions()
        subs = data.get(user_id, [])

        if not subs:
            bot.send_message(message.chat.id, "‚ùå –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
            return

        text = "üßæ *–ò—Å—Ç–æ—Ä–∏—è –æ–ø–ª–∞—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º:*\n\n"
        has_history = False

        for s in subs:
            history = s.get("history", [])
            if not history:
                continue

            text += f"üîπ {s['service']}:\n"
            for h in history:
                text += f"‚Ä¢ {h['date']} ‚Äî {h['price']}‚ÇΩ\n"
            text += "\n"
            has_history = True

        if not has_history:
            text = "‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫."

        bot.send_message(message.chat.id, text, parse_mode="Markdown")






    # ‚îÄ‚îÄ‚îÄ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    elif message.text == "üìë –¢–∞—Ä–∏—Ñ—ã —Å–µ—Ä–≤–∏—Å–æ–≤":

        tariffs  = TARIFF_REF.get() or {}
        uid      = str(message.from_user.id)
        subs     = load_subscriptions().get(uid, [])

        any_cheaper = False           # flag: –Ω–∞–π–¥–µ–Ω—ã –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã

        for idx, sub in enumerate(subs):
            if not sub.get("active", True):
                continue

            canon_id = canon(sub["service"])
            offers = tariffs.get(safe_key(canon_id))
            if not offers:
                continue

            cheapest   = min(offers, key=lambda o: o["price"])
            diff       = sub["price"] - cheapest["price"]
            if diff <= 0:
                continue             # –¥–æ—Ä–æ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å

            any_cheaper = True
            user_title  = sub.get("display", sub["service"])
            text_line   = (
                f"üîª {user_title} ‚Üí —Ç–∞—Ä–∏—Ñ ¬´{cheapest['name']}¬ª "
                f"–¥–µ—à–µ–≤–ª–µ –Ω–∞ {diff} ‚ÇΩ"
            )

            # ‚îÄ‚îÄ –°–ë–û–†–ö–ê –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            kb = telebot.types.InlineKeyboardMarkup(row_width=4)

            # ‚ë† —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            kb.add(
                telebot.types.InlineKeyboardButton("‚úèÔ∏è", callback_data=f"edit_{idx}"),
                telebot.types.InlineKeyboardButton("üîî", callback_data=f"rem7_{idx}"),
                telebot.types.InlineKeyboardButton("üö´", callback_data=f"cancel_{idx}"),
            )

            # ‚ë° —Å—Å—ã–ª–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if cheapest.get("url"):
                kb.add(
                    telebot.types.InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏", url=cheapest["url"])
                )

            # ‚îÄ‚îÄ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
            bot.send_message(message.chat.id, text_line, reply_markup=kb)

        # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äì –ø–∏—à–µ–º –ø—Ä–µ–∂–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not any_cheaper:
            bot.send_message(message.chat.id, "‚úÖ –£ —Ç–µ–±—è —É–∂–µ —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã.")


    elif message.text == "üì¶ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞":
        user_states[user_id] = "selecting_tariff"
        tariffs = TARIFF_REF.get() or {}

        markup = telebot.types.InlineKeyboardMarkup()
        for key, offers in tariffs.items():
            name = offers[0]["name"]
            markup.add(telebot.types.InlineKeyboardButton(name, callback_data=f"choose_tariff_{key}"))

        markup.add(telebot.types.InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_tariff_add"))
        bot.send_message(message.chat.id, "üì¶ –í—ã–±–µ—Ä–∏ —Å–µ—Ä–≤–∏—Å –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        return

    elif (user_states.get(user_id) or "").startswith("tariff_date_"):

        key = user_states[user_id].split("_", 2)[2]
        offers = TARIFF_REF.get() or {}
        if key not in offers:
            bot.send_message(message.chat.id, "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states[user_id] = None
            return

        try:
            pay_date = datetime.strptime(message.text.strip(), "%d.%m.%Y")
            if pay_date < datetime.today():
                bot.send_message(message.chat.id, "‚ùå –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞.")
                return
        except:
            bot.send_message(message.chat.id, "‚ùå –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 01.06.2025")
            return

        offer = offers[key][0]
        subs = load_subscriptions()
        subs.setdefault(user_id, []).append({
            "service": canon(offer["name"]),
            "display": offer["name"],
            "price": offer["price"],
            "next_payment": pay_date.strftime("%d.%m.%Y"),
            "active": True,
            "notify": True,
            "notify_days": 3,
            "period": offer.get("period", "monthly")
        })
        save_subscriptions(subs)
        user_states[user_id] = None
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {offer['name']} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        show_subscriptions_menu(message)
        return


    elif message.text == "üìÅ –ò–º–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫":
        user_states[user_id] = "awaiting_import"
        bot.send_message(message.chat.id, "üìé –ü—Ä–∏—à–ª–∏ —Ñ–∞–π–ª .json —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º –ø–æ–¥–ø–∏—Å–æ–∫. –Ø –¥–æ–±–∞–≤–ª—é –∏—Ö –∫ —Ç–µ–∫—É—â–∏–º.")

    elif message.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–æ–∫":
        subs = load_subscriptions().get(user_id, [])
        if not subs:
            bot.send_message(message.chat.id, "üìÇ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
            return

        json_data = json.dumps(subs, indent=2, ensure_ascii=False)
        file = io.BytesIO()
        file.write(json_data.encode("utf-8"))
        file.seek(0)
        bot.send_document(message.chat.id, file, visible_file_name="subscriptions.json")









    else:
            bot.send_message(message.chat.id, "‚ùì –ù–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏ /menu")
    return



























def handle_subscription_input(message):
    user_id = str(message.from_user.id)
    parts = message.text.split(',')
    if len(parts) != 3:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ù—É–∂–Ω–æ 3: –ù–∞–∑–≤–∞–Ω–∏–µ, –¶–µ–Ω–∞, –î–∞—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: VK Combo, 200, 25.12.2025")
        return

    service, price_str, date_str = map(str.strip, parts)
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –∫–∞–Ω–æ–Ω
    service_input = service              # —Ç–æ, –∫–∞–∫ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    canon_name    = canon(service)       # –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è


    try:
        price = int(price_str)
        if price <= 0:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: 599")
        return

    try:
        pay_date = datetime.strptime(date_str, "%d.%m.%Y")
        if pay_date < datetime.today():
            bot.send_message(message.chat.id, "‚ùå –î–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞. –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤ –±—É–¥—É—â–µ–º.")
            return
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå  –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π `–î–î.–ú–ú.–ì–ì–ì–ì`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `01.05.2025`", parse_mode="Markdown")
        return

    data = load_subscriptions()
    if user_id not in data:
        data[user_id] = []

    data[user_id].append({
        "service": canon_name,         # –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
        "display": service_input,      # –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –≤—ã–≤–æ–¥–∞
        "price": price,
        "next_payment": pay_date.strftime("%d.%m.%Y"),
        "active": True,
        "notify": True,
        "notify_days": 1,
        "period": "monthly"
    })

    save_subscriptions(data)
    user_states[user_id] = None

    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {service} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    show_menu(message)








@bot.callback_query_handler(func=lambda call: call.data.startswith("del_"))
def callback_delete_subscription(call):
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[1])

    data = load_subscriptions()
    subs = data.get(user_id, [])

    if index >= len(subs):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    deleted = subs.pop(index)
    save_subscriptions(data)

    bot.edit_message_text(
        f"üóë –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {deleted['service']} —É–¥–∞–ª–µ–Ω–∞.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
@bot.callback_query_handler(func=lambda call: call.data.startswith("pause_"))
def callback_pause_subscription(call):
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[1])

    data = load_subscriptions()
    active_subs = [s for s in data.get(user_id, []) if s.get("active", True) and s.get("notify", True)]

    if index >= len(active_subs):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    paused = active_subs[index]
    paused["active"] = False
    save_subscriptions(data)

    bot.edit_message_text(
        f"‚è∏ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {paused['service']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("resume_"))
def callback_resume_subscription(call):
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[1])

    data = load_subscriptions()
    all_subs = data.get(user_id, [])
    inactive_subs = [s for s in all_subs if not s.get("active", True) and s.get("notify", True)]

    if index >= len(inactive_subs):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    resumed = inactive_subs[index]
    resumed["active"] = True
    save_subscriptions(data)

    bot.edit_message_text(
        f"‚ñ∂Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {resumed['service']} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )





















# === –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===




@bot.callback_query_handler(func=lambda call: call.data == "change_notify_days")
def notify_days_select_subscription(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.from_user.id)
    data = load_subscriptions()
    full_subs = data.get(user_id, [])

    # ‚è≥ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    active_notified = [
        (i, s) for i, s in enumerate(full_subs)
        if s.get("active", True) and s.get("notify", True)
    ]

    if not active_notified:
        bot.send_message(call.message.chat.id, "‚ùå –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    for real_index, s in active_notified:
        btn_text = f"{s['service']} ({s['next_payment']})"
        callback = f"notifydays_select_{real_index}"
        markup.add(telebot.types.InlineKeyboardButton(btn_text, callback_data=callback))

    markup.add(telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back"))

    bot.edit_message_text(
        "‚è≥ –í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–æ–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )



@bot.callback_query_handler(func=lambda call: call.data.startswith("notifydays_select_"))
def choose_days(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[-1])

    data = load_subscriptions()
    subs = data.get(user_id, [])
    if index >= len(subs):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back"))

    for d in [1, 3, 5, 7]:
        markup.add(telebot.types.InlineKeyboardButton(
            f"üîî –ó–∞ {d} –¥–Ω.", callback_data=f"set_notifydays_{index}_{d}"
        ))

    bot.edit_message_text(
        "‚è± –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å?",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("set_notifydays_"))
def save_notify_days(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.from_user.id)
    parts = call.data.split("_")
    index = int(parts[2])
    days = int(parts[3])

    data = load_subscriptions()
    subs = data.get(user_id, [])
    if 0 <= index < len(subs):
        subs[index].setdefault("notify", True)
        subs[index]["notify_days"] = days
        save_subscriptions(data)
        bot.edit_message_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {days} –¥–Ω–µ–π –¥–æ –æ–ø–ª–∞—Ç—ã –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è {subs[index]['service']}.",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@bot.callback_query_handler(func=lambda call: call.data == "notify_disable")
def disable_notifications(call):
    bot.answer_callback_query(call.id)
    print("[DEBUG] notify_disable clicked")
    user_id = str(call.from_user.id)
    data = load_subscriptions()
    subs = data.get(user_id, [])

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back"))
    for i, s in enumerate(subs):
        if s.get("active", True) and s.get("notify", True):
            markup.add(telebot.types.InlineKeyboardButton(
                f"{s['service']} ({s['next_payment']})",
                callback_data=f"notify_disable_{i}"
            ))

    if not markup.keyboard:
        bot.answer_callback_query(call.id, "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã.")
        return

    bot.edit_message_text(
        "üîï –í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("notify_disable_"))
def disable_notify_subscription(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[-1])
    data = load_subscriptions()
    subs = data.get(user_id, [])

    if index >= len(subs):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    subs[index].setdefault("notify", True)
    subs[index]["notify"] = False
    save_subscriptions(data)

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back"))

    bot.edit_message_text(
        f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subs[index]['service']}.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

@bot.callback_query_handler(func=lambda call: call.data == "notify_enable")
def show_notify_enable_menu(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.from_user.id)
    data = load_subscriptions()
    subs = data.get(user_id, [])

    markup = telebot.types.InlineKeyboardMarkup()
    for i, s in enumerate(subs):
        if s.get("active", True) and not s.get("notify", True):
            markup.add(telebot.types.InlineKeyboardButton(
                f"{s['service']} ({s['next_payment']})",
                callback_data=f"notify_enable_{i}"
            ))

    if not markup.to_dict().get("inline_keyboard"):
        bot.send_message(call.message.chat.id, "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã.")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
    markup.add(telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back"))

    bot.edit_message_text(
        "‚úÖ –í—ã–±–µ—Ä–∏ –ø–æ–¥–ø–∏—Å–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("notify_enable_"))
def enable_notify_subscription(call):
    bot.answer_callback_query(call.id)
    user_id = str(call.from_user.id)
    index = int(call.data.split("_")[-1])
    data = load_subscriptions()
    subs = data.get(user_id, [])

    if index >= len(subs):
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    subs[index]["notify"] = True
    save_subscriptions(data)

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back"))

    bot.edit_message_text(
        f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subs[index]['service']}.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )

def send_notify_menu(chat_id, message_id=None):
    markup = telebot.types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        telebot.types.InlineKeyboardButton("üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –æ–ø–ª–∞—Ç—ã", callback_data="notify_upcoming"),
        telebot.types.InlineKeyboardButton("‚è≥ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ä–æ–∫", callback_data="change_notify_days"),
        telebot.types.InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", callback_data="notify_disable"),
        telebot.types.InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å", callback_data="notify_enable")
    )
    if message_id:
        bot.edit_message_text(
            "üîî –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
            chat_id=chat_id,
            message_id=message_id,
            reply_markup=markup
        )
    else:
        bot.send_message(
            chat_id,
            "üîî –ú–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?",
            reply_markup=markup
        )


def check_for_upcoming_payments():
    data = load_subscriptions()
    today = datetime.today()
    notify_delta = timedelta(days=1)

    for user_id, subs in data.items():
        for sub in subs:
            if not sub.get("active", True):
                continue

            try:
                pay_date = datetime.strptime(sub["next_payment"], "%d.%m.%Y")
                if 0 <= (pay_date - today).days <= notify_delta.days:
                    bot.send_message(
                        user_id,
                        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ {sub['service']} ‚Äî {pay_date.strftime('%d.%m.%Y')} –Ω–∞ —Å—É–º–º—É {sub['price']}‚ÇΩ"
                    )
            except:
                continue


@bot.callback_query_handler(func=lambda call: call.data == "notify_upcoming")
def show_upcoming_payments(call):
    user_id = str(call.from_user.id)
    data = load_subscriptions()
    subs = data.get(user_id, [])

    if not subs:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    subs = [s for s in subs if s.get("active", True)]

    if not subs:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    # –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ
    try:
        subs.sort(key=lambda s: datetime.strptime(s["next_payment"], "%d.%m.%Y"))
    except:
        pass

    text = "üìÖ *–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:*\n\n"
    for s in subs:
        try:
            pay_date = datetime.strptime(s["next_payment"], "%d.%m.%Y")
            date_str = f"{pay_date.day} {MONTHS_RU[pay_date.month]} {pay_date.year}"

        except:
            date_str = s["next_payment"]

        notify = s.get("notify", True)
        notify_days = s.get("notify_days", 1)

        if notify:
            notify_info = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ {notify_days} –¥–Ω."
        else:
            notify_info = "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ"

        text += f"üîπ {s['service']} ‚Äî {date_str} ({s['price']}‚ÇΩ)\n{notify_info}\n\n"

    markup = telebot.types.InlineKeyboardMarkup()
    markup.add(telebot.types.InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="notify_back"))

    bot.edit_message_text(
        text,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        parse_mode="Markdown",
        reply_markup=markup
    )



@bot.callback_query_handler(func=lambda c: c.data.startswith("cancel_") and not c.data.startswith("edit_cancel") and c.data != "cancel_tariff_add")
def cb_cancel(call):
    idx = int(call.data.split("_")[1])
    uid = str(call.from_user.id)
    data = load_subscriptions()
    subs = data.get(uid, [])

    if 0 <= idx < len(subs):
        subs[idx]["active"] = False
        save_subscriptions(data)
        bot.answer_callback_query(call.id, "‚è∏ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
    else:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞: –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

@bot.callback_query_handler(
    func=lambda c: c.data.startswith("edit_") and c.data != "edit_cancel")
def cb_edit(call):
    parts = call.data.split("_")
    if len(parts) != 2 or not parts[1].isdigit():          # –∑–∞—â–∏—Ç–∞
        return                                             # —á—É–∂–æ–π callback ‚Äî –∏–≥–Ω–æ—Ä
    idx = int(parts[1])
    uid = str(call.from_user.id)
    user_states[uid] = f"editing_{idx}"
    bot.answer_callback_query(call.id)
    cancel_kb = telebot.types.InlineKeyboardMarkup()
    cancel_kb.add(
        telebot.types.InlineKeyboardButton("‚Ü© –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="edit_cancel")
    )

    bot.send_message(
        call.message.chat.id,
        "üñâ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É: `–¶–µ–Ω–∞,  –î–∞—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì)`",
        parse_mode="Markdown",
        reply_markup=cancel_kb
    )





@bot.callback_query_handler(func=lambda c: c.data.startswith("rem7_"))
def cb_remind(call):
    idx = int(call.data.split("_")[1])
    uid = str(call.from_user.id)
    data = load_subscriptions()
    subs = data.get(uid, [])

    if not (0 <= idx < len(subs)):
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞")
        return

    sub = subs[idx]
    try:
        pay_date = datetime.strptime(sub["next_payment"], "%d.%m.%Y")
        remind_date = pay_date - timedelta(days=7)
        scheduler.add_job(
            bot.send_message,
            'date',
            run_date=remind_date,
            args=[uid, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –æ–ø–ª–∞—Ç–∞ –∑–∞ {sub['display']}"]
        )
        bot.answer_callback_query(call.id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        bot.answer_callback_query(call.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        print("rem7 error", e)





@bot.callback_query_handler(func=lambda c: c.data == "edit_cancel")
def cb_edit_cancel(call):
    uid = str(call.from_user.id)
    user_states[uid] = None
    bot.answer_callback_query(call.id, "‚úñÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

    # –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é —Ç–∞—Ä–∏—Ñ–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    bot.edit_message_reply_markup(call.message.chat.id,
                                  call.message.message_id,
                                  reply_markup=None)




@bot.callback_query_handler(func=lambda c: c.data.startswith("choose_tariff_"))
def cb_choose_tariff(call):
    key = call.data.split("_", 2)[2]
    uid = str(call.from_user.id)
    offers = TARIFF_REF.get() or {}

    if key not in offers:
        bot.answer_callback_query(call.id, "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_states[uid] = f"tariff_date_{key}"
    name = offers[key][0]["name"]
    price = offers[key][0]["price"]

    bot.send_message(call.message.chat.id,
        f"üì∫ <b>{name}</b>\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ—É: <b>{price}‚ÇΩ</b>\n\n"
        f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        parse_mode="HTML"
    )



@bot.callback_query_handler(func=lambda c: c.data == "cancel_tariff_add")
def cb_cancel_tariff_add(call):
    user_states[str(call.from_user.id)] = None
    bot.answer_callback_query(call.id, "‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ")
    bot.edit_message_text("‚ùé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)







@bot.message_handler(content_types=["document"])
def handle_file_upload(message):
    uid = str(message.from_user.id)
    if user_states.get(uid) != "awaiting_import":
        return

    file_info = bot.get_file(message.document.file_id)
    downloaded = bot.download_file(file_info.file_path)

    try:
        new_subs = json.loads(downloaded.decode("utf-8"))
        if not isinstance(new_subs, list):
            raise Exception("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫.")

        subs = load_subscriptions()
        current = subs.get(uid, [])

        # —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        def unique_key(s): return f"{s.get('service')}::{s.get('next_payment')}"
        existing_keys = {unique_key(s) for s in current}

        added = [s for s in new_subs if unique_key(s) not in existing_keys]
        current.extend(added)
        subs[uid] = current
        save_subscriptions(subs)

        bot.send_message(message.chat.id, f"‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(added)} –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
    finally:
        user_states[uid] = None





@bot.callback_query_handler(func=lambda c: c.data == "cancel_tariff_add")
def cb_cancel_tariff_add(call):
    user_id = str(call.from_user.id)
    user_states[user_id] = None
    bot.answer_callback_query(call.id, "‚ùé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    bot.edit_message_text("‚ùé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", call.message.chat.id, call.message.message_id)





































@bot.callback_query_handler(func=lambda call: call.data == "notify_back")
def notify_back_menu(call):
    send_notify_menu(call.message.chat.id, call.message.message_id)



scheduler = BackgroundScheduler()
scheduler.start()
scheduler.add_job(check_for_upcoming_payments, 'interval', hours=24)









update_tariff_db()      
scheduler.add_job(update_tariff_db, 'interval', hours=24)








# ===== –ó–∞–ø—É—Å–∫ =====
bot.polling(none_stop=True)
